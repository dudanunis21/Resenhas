Codigo antes da alteracao: 
using System;
using System.Collections.Generic;

namespace LovePet
{
    class Program
    {
        static void Main(string[] args)
        {
            // Criando instâncias de alguns objetos
            PetShop lovepet = new PetShop("LovePet");

            // Adicionando veterinários
            lovepet.AdicionarVeterinario(new Veterinario("Dr. Ana", "VET001"));
            lovepet.AdicionarVeterinario(new Veterinario("Dr. Pedro", "VET002"));

            // Adicionando secretárias
            lovepet.AdicionarSecretaria(new Secretaria("Juliana"));
            lovepet.AdicionarSecretaria(new Secretaria("Mariana"));

            // Adicionando pacientes
            lovepet.AdicionarPaciente(new Paciente("Rex", 5, "Pastor Alemão"));
            lovepet.AdicionarPaciente(new Paciente("Bella", 3, "Labrador"));

            // Cadastro de laudo
            lovepet.AdicionarLaudo(new Laudo("Exame de rotina", "Rex", "Dr. Ana", DateTime.Now));

            // Controlando ração
            lovepet.AdicionarRacaoEntrada(50); // 50 kg de ração
            lovepet.AdicionarRacaoSaida(20); // 20 kg de ração saindo

            // Relatório do sistema
            lovepet.ImprimirRelatorio();
        }
    }

    public class PetShop
    {
        public string Nome { get; set; }
        public List<Veterinario> Veterinarios { get; set; }
        public List<Secretaria> Secretarias { get; set; }
        public List<Paciente> Pacientes { get; set; }
        public List<Laudo> Laudos { get; set; }
        public double QuantidadeRacao { get; set; }

        public PetShop(string nome)
        {
            Nome = nome;
            Veterinarios = new List<Veterinario>();
            Secretarias = new List<Secretaria>();
            Pacientes = new List<Paciente>();
            Laudos = new List<Laudo>();
            QuantidadeRacao = 0;
        }

        public void AdicionarVeterinario(Veterinario veterinario)
        {
            Veterinarios.Add(veterinario);
        }

        public void AdicionarSecretaria(Secretaria secretaria)
        {
            Secretarias.Add(secretaria);
        }

        public void AdicionarPaciente(Paciente paciente)
        {
            Pacientes.Add(paciente);
        }

        public void AdicionarLaudo(Laudo laudo)
        {
            Laudos.Add(laudo);
        }

        public void AdicionarRacaoEntrada(double quantidade)
        {
            QuantidadeRacao += quantidade;
        }

        public void AdicionarRacaoSaida(double quantidade)
        {
            QuantidadeRacao -= quantidade;
        }

        public void ImprimirRelatorio()
        {
            Console.WriteLine($"Relatório da Clínica {Nome}\n");

            Console.WriteLine("Veterinários:");
            foreach (var vet in Veterinarios)
            {
                Console.WriteLine($"{vet.Nome} - {vet.Codigo}");
            }

            Console.WriteLine("\nSecretarias:");
            foreach (var sec in Secretarias)
            {
                Console.WriteLine(sec.Nome);
            }

            Console.WriteLine("\nPacientes:");
            foreach (var paciente in Pacientes)
            {
                Console.WriteLine($"{paciente.Nome} - {paciente.Idade} anos - {paciente.Raca}");
            }

            Console.WriteLine("\nLaudos:");
            foreach (var laudo in Laudos)
            {
                Console.WriteLine($"{laudo.Descricao} - {laudo.Paciente} - {laudo.Veterinario} - {laudo.Data}");
            }

            Console.WriteLine($"\nQuantidade de ração disponível: {QuantidadeRacao} kg");
        }
    }

    public class Veterinario
    {
        public string Nome { get; set; }
        public string Codigo { get; set; }

        public Veterinario(string nome, string codigo)
        {
            Nome = nome;
            Codigo = codigo;
        }
    }

    public class Secretaria
    {
        public string Nome { get; set; }

        public Secretaria(string nome)
        {
            Nome = nome;
        }
    }

    public class Paciente
    {
        public string Nome { get; set; }
        public int Idade { get; set; }
        public string Raca { get; set; }

        public Paciente(string nome, int idade, string raca)
        {
            Nome = nome;
            Idade = idade;
            Raca = raca;
        }
    }

    public class Laudo
    {
        public string Descricao { get; set; }
        public string Paciente { get; set; }
        public string Veterinario { get; set; }
        public DateTime Data { get; set; }

        public Laudo(string descricao, string paciente, string veterinario, DateTime data)
        {
            Descricao = descricao;
            Paciente = paciente;
            Veterinario = veterinario;
            Data = data;
        }
    }
} 



Codigo depois da alteracao/refatoracao:

using System;
using System.Collections.Generic;

namespace LovePet
{
    class Program
    {
        static void Main(string[] args)
        {
            // Criando instâncias de alguns objetos
            PetShop lovepet = new PetShop("LovePet");

            // Adicionando veterinários
            var vet1 = new Veterinario("Dr. Ana", "VET001");
            var vet2 = (Veterinario)vet1.Clone();
            vet2.Nome = "Dr. Pedro";
            vet2.Codigo = "VET002";
            lovepet.AdicionarVeterinario(vet1);
            lovepet.AdicionarVeterinario(vet2);

            // Adicionando pacientes
            var paciente1 = new Paciente("Rex", 5, "Pastor Alemão");
            var paciente2 = (Paciente)paciente1.Clone();
            paciente2.Nome = "Bella";
            paciente2.Idade = 3;
            paciente2.Raca = "Labrador";
            lovepet.AdicionarPaciente(paciente1);
            lovepet.AdicionarPaciente(paciente2);

            // Cadastro de laudo
            var laudo1 = new Laudo("Exame de rotina", "Rex", "Dr. Ana", DateTime.Now);
            lovepet.AdicionarLaudo(laudo1);

            // Relatório do sistema
            lovepet.ImprimirRelatorio();
        }
    }

    public interface IPrototype
    {
        object Clone();
    }

    public class PetShop
    {
        public string Nome { get; set; }
        public List<Veterinario> Veterinarios { get; set; }
        public List<Paciente> Pacientes { get; set; }
        public List<Laudo> Laudos { get; set; }

        public PetShop(string nome)
        {
            Nome = nome;
            Veterinarios = new List<Veterinario>();
            Pacientes = new List<Paciente>();
            Laudos = new List<Laudo>();
        }

        public void AdicionarVeterinario(Veterinario veterinario) => Veterinarios.Add(veterinario);
        public void AdicionarPaciente(Paciente paciente) => Pacientes.Add(paciente);
        public void AdicionarLaudo(Laudo laudo) => Laudos.Add(laudo);

        public void ImprimirRelatorio()
        {
            Console.WriteLine($"Relatório da Clínica {Nome}\n");

            Console.WriteLine("Veterinários:");
            foreach (var vet in Veterinarios)
            {
                Console.WriteLine($"{vet.Nome} - {vet.Codigo}");
            }

            Console.WriteLine("\nPacientes:");
            foreach (var paciente in Pacientes)
            {
                Console.WriteLine($"{paciente.Nome} - {paciente.Idade} anos - {paciente.Raca}");
            }

            Console.WriteLine("\nLaudos:");
            foreach (var laudo in Laudos)
            {
                Console.WriteLine($"{laudo.Descricao} - {laudo.Paciente} - {laudo.Veterinario} - {laudo.Data}");
            }
        }
    }

    public class Veterinario : IPrototype
    {
        public string Nome { get; set; }
        public string Codigo { get; set; }

        public Veterinario(string nome, string codigo)
        {
            Nome = nome;
            Codigo = codigo;
        }

        public object Clone() => MemberwiseClone();
    }

    public class Paciente : IPrototype
    {
        public string Nome { get; set; }
        public int Idade { get; set; }
        public string Raca { get; set; }

        public Paciente(string nome, int idade, string raca)
        {
            Nome = nome;
            Idade = idade;
            Raca = raca;
        }

        public object Clone() => MemberwiseClone();
    }

    public class Laudo : IPrototype
    {
        public string Descricao { get; set; }
        public string Paciente { get; set; }
        public string Veterinario { get; set; }
        public DateTime Data { get; set; }

        public Laudo(string descricao, string paciente, string veterinario, DateTime data)
        {
            Descricao = descricao;
            Paciente = paciente;
            Veterinario = veterinario;
            Data = data;
        }

        public object Clone() => MemberwiseClone();
    }
}



